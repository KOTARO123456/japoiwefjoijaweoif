<!DOCTYPE html>
<html lang="ja">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>日記アプリ ENGLISH</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 0;
            padding: 0;
            background-color: #f9f9f9;
        }
        header {
            background-color: #4CAF50;
            color: white;
            text-align: center;
            padding: 1rem 0;
        }
        main {
            max-width: 700px;
            margin: 2rem auto;
            padding: 1rem;
            background: white;
            border-radius: 8px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        }
        .chat-window {
            border: 1px solid #ccc;
            border-radius: 8px;
            padding: 1rem;
            height: 400px;
            overflow-y: auto;
            background-color: #f9f9f9;
            margin-bottom: 1rem;
        }
        .message {
            margin: 0.5rem 0;
            padding: 0.5rem;
            border-radius: 4px;
        }
        .user {
            background-color: #d1f8d1;
            text-align: right;
        }
        .ai {
            background-color: #e0f7fa;
            text-align: left;
        }
        input[type="text"] {
            width: calc(100% - 110px);
            padding: 0.5rem;
            border: 1px solid #ccc;
            border-radius: 4px;
        }
        button {
            padding: 0.5rem 1rem;
            background-color: #4CAF50;
            color: white;
            border: none;
            border-radius: 4px;
            cursor: pointer;
        }
        button:hover {
            background-color: #45a049;
        }
        .voice-input-btn {
            background-color: #FF4081;
        }
        .voice-input-btn:hover {
            background-color: #D81B60;
        }
    </style>
</head>
<body>
    <header>
        <h1>日記アプリ ENGLISH</h1>
    </header>
    <main>
        <div class="chat-window" id="chat-window">
            <div class="message ai">What did you do today?</div>
        </div>
        <div>
            <input type="text" id="user-input" placeholder="英語で入力してください">
            <button onclick="sendMessage()">送信</button>
            <button class="voice-input-btn" onclick="startVoiceInput()">音声入力</button>
        </div>
    </main>

    <script>
        const apiKey = 'YOUR_OPENAI_API_KEY'; // OpenAIのAPIキーを入力してください
        const chatWindow = document.getElementById('chat-window');
        
        // ユーザーのメッセージを送信する関数
        async function sendMessage() {
            const userInput = document.getElementById('user-input').value;
            if (!userInput) return;
            
            // ユーザーメッセージを表示
            const userMessage = document.createElement('div');
            userMessage.classList.add('message', 'user');
            userMessage.textContent = userInput;
            chatWindow.appendChild(userMessage);

            // メッセージ送信後に入力欄をリセット
            document.getElementById('user-input').value = '';
            
            // APIにメッセージを送信してAIの応答を受け取る
            const response = await fetchAIResponse(userInput);
            
            // AIのメッセージを表示
            const aiMessage = document.createElement('div');
            aiMessage.classList.add('message', 'ai');
            aiMessage.textContent = response;
            chatWindow.appendChild(aiMessage);
            
            // チャットウィンドウのスクロールを一番下に
            chatWindow.scrollTop = chatWindow.scrollHeight;
        }

        // OpenAI APIにリクエストを送る関数
        async function fetchAIResponse(userMessage) {
            const response = await fetch('https://api.openai.com/v1/chat/completions', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': `Bearer ${apiKey}`
                },
                body: JSON.stringify({
                    model: "gpt-3.5-turbo",  // 使用するモデル
                    messages: [
                        { role: "system", content: "You are a helpful assistant." },
                        { role: "user", content: userMessage }
                    ]
                })
            });
            const data = await response.json();
            return data.choices[0].message.content.trim(); // AIの応答を返す
        }

        // 音声入力を開始する関数
        function startVoiceInput() {
            const recognition = new (window.SpeechRecognition || window.webkitSpeechRecognition)();
            recognition.lang = 'en-US';
            recognition.start();
            recognition.onresult = function(event) {
                const transcript = event.results[0][0].transcript;
                document.getElementById('user-input').value = transcript;
                sendMessage(); // 音声入力が終わったら自動で送信
            };
            recognition.onerror = function(event) {
                console.error('Speech recognition error', event);
            };
        }
    </script>
</body>
</html>
